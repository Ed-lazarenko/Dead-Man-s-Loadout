import { useState, useCallback } from 'react'
import { useLoadoutData } from '../hooks/useLoadoutData'
import ScoreModal, { type ScoreCalculationData } from './ScoreModal'
import type { LoadoutGridProps, PlayedCellData, LoadoutCell } from '../types'
import { UI_CONFIG, TEAM_COLORS } from '../constants'
import { 
  getActiveTeam, 
  saveActiveTeam, 
  calculateScoreResult, 
  formatNumber
} from '../utils'
import { debugLog } from '../utils'

export default function LoadoutGrid({ className = '' }: LoadoutGridProps) {
  const { data, updateCellState, markCellAsPlayed } = useLoadoutData()
  // –£–±—Ä–∞–ª–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—É—é –º–æ–¥–∞–ª–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const gridGap = 16 // gap-4 = 1rem ~ 16px
  const [scoreModal, setScoreModal] = useState<{
    isOpen: boolean
    rowIdx: number
    colIdx: number
    cost: number
  }>({
    isOpen: false,
    rowIdx: -1,
    colIdx: -1,
    cost: 0
  })

  const handleCellClick = useCallback((cell: LoadoutCell, rowIdx: number, colIdx: number) => {
    if (cell.state === 'closed') {
      updateCellState(rowIdx, colIdx, 'opened')
    }
  }, [updateCellState])

  const handleCellRightClick = useCallback((cell: LoadoutCell, rowIdx: number, colIdx: number, cost: number) => {
    if (cell.state === 'closed') {
      debugLog('Add label modal for', rowIdx, colIdx)
    } else if (cell.state === 'opened') {
      setScoreModal({
        isOpen: true,
        rowIdx,
        colIdx,
        cost
      })
    }
  }, [])

  const handleScoreSave = useCallback((scoreData: ScoreCalculationData) => {
    const { kills, bonus, rewards, penalty, multiplier, cost } = scoreData
    
    // –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ
    const { result, penalty: finalPenalty } = calculateScoreResult({
      kills,
      bonus,
      rewards,
      penalty,
      multiplier,
      cost
    })

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    let team = getActiveTeam()
    
    // –ó–∞–≥–ª—É—à–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é
    if (!team.length) {
      team = ['–ò–≥—Ä–æ–∫ 1', '–ò–≥—Ä–æ–∫ 2', '–ò–≥—Ä–æ–∫ 3']
      saveActiveTeam(team)
      debugLog('Created temporary team:', team)
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const playedData: PlayedCellData = {
      team,
      color: TEAM_COLORS.PRIMARY,
      result: formatNumber(result),
      penalty: formatNumber(finalPenalty)
    }

    markCellAsPlayed(scoreModal.rowIdx, scoreModal.colIdx, playedData)
    setScoreModal({ isOpen: false, rowIdx: -1, colIdx: -1, cost: 0 })
  }, [scoreModal, markCellAsPlayed])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π, —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ç—Ä–µ–∫–∞–º

  return (
    <div className={className}>
      {/* –°–µ—Ç–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±–µ—Ä—Ç–æ–∫ */}
      <div 
        className="grid"
        style={{
          gap: `${gridGap}px`,
          gridTemplateColumns: `${UI_CONFIG.GRID_CELL_SIZE.HEADER_WIDTH}px repeat(6, ${UI_CONFIG.GRID_CELL_SIZE.CELL_WIDTH}px)`,
          gridTemplateRows: `${UI_CONFIG.GRID_CELL_SIZE.HEADER_HEIGHT}px repeat(5, ${UI_CONFIG.GRID_CELL_SIZE.CELL_HEIGHT}px)`
        }}
      >
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="border border-white/15 rounded-md flex items-center justify-center bg-black/20">
                <span className="text-2xl">üíÄ</span>
              </div>
              
              {/* –ö–æ–ª–æ–Ω–∫–∏ */}
              {data.columns.map((column, idx) => (
            <div key={idx} className="border border-white/15 rounded-md flex items-center justify-center bg-black/20">
                  <span className="font-semibold text-sm">{column}</span>
                </div>
              ))}

              {/* –°—Ç—Ä–æ–∫–∏ */}
              {data.cells.map((row, rowIdx) => {
                const rowLabel = data.rows[rowIdx]
                const cost = parseInt(rowLabel)
                
                return [
                  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏
              <div key={`row-${rowIdx}`} className="border border-white/15 rounded-md flex items-center justify-center bg-black/20">
                    <span className="font-semibold text-sm">{rowLabel}</span>
                  </div>,
                  // –Ø—á–µ–π–∫–∏ —Å—Ç—Ä–æ–∫–∏
                  ...row.map((cell, colIdx) => {
                    // const isMarked = isCellMarked(rowIdx, colIdx, data.marked)
                    
                    return (
                      <div
                        key={`cell-${rowIdx}-${colIdx}`}
                        className="relative border border-white/15 rounded-md overflow-hidden bg-black/20 flex items-center justify-center"
                        onClick={() => handleCellClick(cell, rowIdx, colIdx)}
                        onContextMenu={(e) => {
                          e.preventDefault()
                          handleCellRightClick(cell, rowIdx, colIdx, cost)
                        }}
                      >
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ */}
                        {cell.state !== 'closed' && (
                          <img
                            src={cell.image}
                            alt=""
                            className="w-full h-full object-contain"
                            onError={(e) => {
                              debugLog('Failed to load image:', cell.image)
                              e.currentTarget.style.display = 'none'
                            }}
                          />
                        )}
                        
                        {/* –ó–∞–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
                        {cell.state === 'closed' && (
                          <div className="absolute inset-0 flex items-center justify-center">
                            <div className="w-12 h-12 rounded-md border border-white/20 bg-black/40 flex items-center justify-center text-2xl">?
                            </div>
                          </div>
                        )}

                        {/* –ü–æ–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã */}

                        {/* Overlay –¥–ª—è –æ—Ç—ã–≥—Ä–∞–Ω–Ω—ã—Ö */}
                        {cell.state === 'played' && cell.playedData && (
                          <div className="absolute inset-0 bg-black/60 text-white flex flex-col items-center justify-center gap-1">
                            <div className="text-lg font-bold">
                              {cell.playedData.penalty > 0 
                                ? `‚àí${cell.playedData.penalty}` 
                                : `+${cell.playedData.result}`
                              }
                            </div>
                            <div className="text-xs uppercase tracking-wider opacity-80">–û—Ç—ã–≥—Ä–∞–Ω–æ</div>
                          </div>
                        )}
                      </div>
                    )
                  })
                ]
              }).flat()}
      </div>

      {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ */}

      {/* –ú–æ–¥–∞–ª–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ */}
      <ScoreModal
        isOpen={scoreModal.isOpen}
        onClose={() => setScoreModal({ isOpen: false, rowIdx: -1, colIdx: -1, cost: 0 })}
        onSave={handleScoreSave}
        rowIndex={scoreModal.rowIdx}
        colIndex={scoreModal.colIdx}
        initialData={{
          kills: 0,
          bonus: 0,
          rewards: 0,
          penalty: 0,
          multiplier: 1,
          cost: scoreModal.cost
        }}
      />
    </div>
  )
}